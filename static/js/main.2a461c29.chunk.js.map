{"version":3,"sources":["Timer.js","reportWebVitals.js","index.js"],"names":["Timer","state","endDate","Date","days","hours","minutes","seconds","errorMsg","onEndDateChange","setState","getTwoDigitValue","value","calculateCountdown","startDate","getTime","start_date","end_date","start_millis","Math","floor","abs","timer","setTimeout","clearTimeout","this","convertedDays","convertedHours","convertedMins","convertedSeconds","className","Form","Group","controlId","Label","format","onChange","Button","variant","type","onClick","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2a461c29.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Button } from \"react-bootstrap\";\r\nimport DateTimePicker from \"react-datetime-picker\";\r\n\r\nexport default class Timer extends React.Component {\r\n  state = {\r\n    endDate: new Date(),\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n    errorMsg: \"\"\r\n  };\r\n\r\n  componentWillUnmount() {\r\n    clearTimeout(this.timer);\r\n  }\r\n\r\n  onEndDateChange = endDate => {\r\n    this.setState({ endDate });\r\n  };\r\n\r\n  getTwoDigitValue = value => {\r\n    if (value < 10) {\r\n      return \"0\" + value;\r\n    }\r\n    return \"\" + value;\r\n  };\r\n\r\n  calculateCountdown = () => {\r\n    const startDate = new Date();\r\n    const { endDate } = this.state;\r\n    let errorMsg = \"\";\r\n\r\n    if (endDate < startDate) {\r\n      errorMsg =\r\n        \"Please select end date and time greater than current date and time.\";\r\n    }\r\n\r\n    this.setState({ errorMsg });\r\n\r\n    const timeRemaining = endDate.getTime() - startDate.getTime();\r\n\r\n    if (timeRemaining > 0) {\r\n      const start_date = new Date(startDate);\r\n      const end_date = new Date(endDate);\r\n      const start_millis = start_date.getTime(); // Get timestamp of start date\r\n      const end_millis = end_date.getTime(); // Get timestamp of end date\r\n\r\n      // Convert to seconds, 1 second = 1000 milli seconds\r\n      const old_sec = start_millis / 1000;\r\n      const current_sec = end_millis / 1000;\r\n\r\n      // Get remaining seconds\r\n      let seconds = current_sec - old_sec;\r\n\r\n      let days = Math.floor(seconds / (24 * 60 * 60)); // 1 day is equal to 24 hours, each hour has 60 mins and each minute has 60 seconds\r\n      seconds -= days * 24 * 60 * 60; // Get remaining seconds\r\n\r\n      let hours = Math.floor(seconds / (60 * 60)); // 1 hour has 60 mins and each minute has 60 seconds\r\n      seconds -= hours * 60 * 60; // Get remaining seconds\r\n\r\n      let minutes = Math.floor(seconds / 60); // 1 minute is equal to 60 seconds\r\n      seconds -= minutes * 60; // Get remaining seconds\r\n\r\n      days = Math.abs(days);\r\n      hours = Math.abs(hours);\r\n      minutes = Math.abs(minutes);\r\n      seconds = Math.floor(Math.abs(seconds));\r\n\r\n      this.setState(\r\n        () => ({\r\n          days,\r\n          hours,\r\n          minutes,\r\n          seconds\r\n        }),\r\n        () => {\r\n          this.timer = setTimeout(this.calculateCountdown, 1000);\r\n        }\r\n      );\r\n    } else {\r\n      this.setState({ errorMsg: \"Times up!\" });\r\n      clearTimeout(this.timer);\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { days, hours, minutes, seconds, errorMsg } = this.state;\r\n    const convertedDays = this.getTwoDigitValue(days);\r\n    const convertedHours = this.getTwoDigitValue(hours);\r\n    const convertedMins = this.getTwoDigitValue(minutes);\r\n    const convertedSeconds = this.getTwoDigitValue(seconds);\r\n\r\n    return (\r\n      <div>\r\n        <div className=\"date-time-form\">\r\n          {<h1>Countdown Timer</h1>}\r\n          {errorMsg && <p className=\"error-msg\">{errorMsg}</p>}\r\n          <Form>\r\n            <Form.Group controlId=\"end_date\">\r\n              <Form.Label className=\"heading\">End Date</Form.Label>\r\n              <DateTimePicker\r\n                format=\"dd/MM/y h:mm:ss a\"\r\n                onChange={this.onEndDateChange}\r\n                value={this.state.endDate}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"danger\"\r\n              type=\"button\"\r\n              onClick={this.calculateCountdown}\r\n            >\r\n              Begin Countdown\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n        <div className=\"counter\">\r\n          <div className=\"time\">\r\n            <div className=\"time-value\">{convertedDays}</div>\r\n            <div className=\"time-label\">Days</div>\r\n          </div>\r\n          <div className=\"time\">\r\n            <div className=\"time-value\">{convertedHours}</div>\r\n            <div className=\"time-label\">Hours</div>\r\n          </div>\r\n          <div className=\"time\">\r\n            <div className=\"time-value\">{convertedMins}</div>\r\n            <div className=\"time-label\">Minutes</div>\r\n          </div>\r\n          <div className=\"time\">\r\n            <div className=\"time-value\">{convertedSeconds}</div>\r\n            <div className=\"time-label\">Seconds</div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Timer from './Timer';\nimport \"./styles.css\";\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Timer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}